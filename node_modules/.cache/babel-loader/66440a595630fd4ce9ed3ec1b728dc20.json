{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport classes from \"./Auth.module.css\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../shared/utillity\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidaity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.building && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this);\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        children: [\"SWITCH TO \", this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRediectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","classes","Input","Spinner","Button","actions","updateObject","checkValidity","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidaity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","componentDidMount","building","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","mapDispatchToProps","dispatch","setAuthRediectPath"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,uBAA5C;;AAEA,MAAMC,IAAN,SAAmBV,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC5BW,KAD4B,GACpB;AACPC,MAAAA,QAAQ,EAAE;AACTC,QAAAA,KAAK,EAAE;AACNC,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACdC,YAAAA,IAAI,EAAE,OADQ;AAEdC,YAAAA,WAAW,EAAE;AAFC,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACXC,YAAAA,QAAQ,EAAE,IADC;AAEXC,YAAAA,OAAO,EAAE;AAFE,WAPN;AAWNC,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH,SADE;AAeTC,QAAAA,QAAQ,EAAE;AACTV,UAAAA,WAAW,EAAE,OADJ;AAETC,UAAAA,aAAa,EAAE;AACdC,YAAAA,IAAI,EAAE,UADQ;AAEdC,YAAAA,WAAW,EAAE;AAFC,WAFN;AAMTC,UAAAA,KAAK,EAAE,EANE;AAOTC,UAAAA,UAAU,EAAE;AACXC,YAAAA,QAAQ,EAAE,IADC;AAEXK,YAAAA,SAAS,EAAE;AAFA,WAPH;AAWTH,UAAAA,KAAK,EAAE,KAXE;AAYTC,UAAAA,OAAO,EAAE;AAZA;AAfD,OADH;AA+BPG,MAAAA,QAAQ,EAAE;AA/BH,KADoB;;AAAA,SAyC5BC,mBAzC4B,GAyCN,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC7C,YAAMC,eAAe,GAAGtB,YAAY,CAAC,KAAKG,KAAL,CAAWC,QAAZ,EAAsB;AACzD,SAACiB,WAAD,GAAerB,YAAY,CAAC,KAAKG,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,CAAD,EAAmC;AAC7DX,UAAAA,KAAK,EAAEU,KAAK,CAACG,MAAN,CAAab,KADyC;AAE7DI,UAAAA,KAAK,EAAE,KAAKU,cAAL,CACNJ,KAAK,CAACG,MAAN,CAAab,KADP,EAEN,KAAKP,KAAL,CAAWC,QAAX,CAAoBiB,WAApB,EAAiCV,UAF3B,CAFsD;AAM7DI,UAAAA,OAAO,EAAE;AANoD,SAAnC;AAD8B,OAAtB,CAApC;AAUA,WAAKU,QAAL,CAAc;AAAErB,QAAAA,QAAQ,EAAEkB;AAAZ,OAAd;AACA,KArD2B;;AAAA,SAuD5BI,qBAvD4B,GAuDJ,MAAM;AAC7B,WAAKD,QAAL,CAAeE,SAAD,IAAe;AAC5B,eAAO;AAAET,UAAAA,QAAQ,EAAE,CAACS,SAAS,CAACT;AAAvB,SAAP;AACA,OAFD;AAGA,KA3D2B;;AAAA,SA6D5BU,aA7D4B,GA6DXR,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACS,cAAN;AACA,WAAKC,KAAL,CAAWC,MAAX,CACC,KAAK5B,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAD3B,EAEC,KAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAF9B,EAGC,KAAKP,KAAL,CAAWe,QAHZ;AAKA,KApE2B;AAAA;;AAmC5Bc,EAAAA,iBAAiB,GAAG;AACnB,QAAI,CAAC,KAAKF,KAAL,CAAWG,QAAZ,IAAwB,KAAKH,KAAL,CAAWI,gBAAX,KAAgC,GAA5D,EAAiE;AAChE,WAAKJ,KAAL,CAAWK,qBAAX;AACA;AACD;;AA+BDC,EAAAA,MAAM,GAAG;AACR,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKnC,KAAL,CAAWC,QAA3B,EAAqC;AACpCiC,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACtBC,QAAAA,EAAE,EAAEF,GADkB;AAEtBG,QAAAA,MAAM,EAAE,KAAKtC,KAAL,CAAWC,QAAX,CAAoBkC,GAApB;AAFc,OAAvB;AAIA;;AACD,QAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAD,iBAChC,QAAC,KAAD;AAEC,MAAA,WAAW,EAAEA,WAAW,CAACH,MAAZ,CAAmBnC,WAFjC;AAGC,MAAA,aAAa,EAAEsC,WAAW,CAACH,MAAZ,CAAmBlC,aAHnC;AAIC,MAAA,KAAK,EAAEqC,WAAW,CAACH,MAAZ,CAAmB/B,KAJ3B;AAKC,MAAA,OAAO,EAAE,CAACkC,WAAW,CAACH,MAAZ,CAAmB3B,KAL9B;AAMC,MAAA,cAAc,EAAE8B,WAAW,CAACH,MAAZ,CAAmB9B,UANpC;AAOC,MAAA,OAAO,EAAEiC,WAAW,CAACH,MAAZ,CAAmB1B,OAP7B;AAQC,MAAA,OAAO,EAAGK,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCwB,WAAW,CAACJ,EAA5C;AARrB,OACMI,WAAW,CAACJ,EADlB;AAAA;AAAA;AAAA;AAAA,YADU,CAAX;;AAYA,QAAI,KAAKV,KAAL,CAAWe,OAAf,EAAwB;AACvBH,MAAAA,IAAI,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AAED,QAAII,YAAY,GAAG,IAAnB;;AACA,QAAI,KAAKhB,KAAL,CAAWiB,KAAf,EAAsB;AACrBD,MAAAA,YAAY,gBAAG;AAAA,kBAAI,KAAKhB,KAAL,CAAWiB,KAAX,CAAiBC;AAArB;AAAA;AAAA;AAAA;AAAA,cAAf;AACA;;AACD,QAAIC,YAAY,GAAG,IAAnB;;AACA,QAAI,KAAKnB,KAAL,CAAWoB,eAAf,EAAgC;AAC/BD,MAAAA,YAAY,gBAAG,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAKnB,KAAL,CAAWI;AAAzB;AAAA;AAAA;AAAA;AAAA,cAAf;AACA;;AACD,wBACC;AAAK,MAAA,SAAS,EAAEvC,OAAO,CAACO,IAAxB;AAAA,iBACE+C,YADF,EAEEH,YAFF,eAGC;AAAM,QAAA,QAAQ,EAAE,KAAKlB,aAArB;AAAA,mBACEc,IADF,eAEC,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,eAOC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKhB,qBAAtB;AAA6C,QAAA,OAAO,EAAC,QAArD;AAAA,iCACY,KAAKvB,KAAL,CAAWe,QAAX,GAAsB,QAAtB,GAAiC,QAD7C;AAAA;AAAA;AAAA;AAAA;AAAA,cAPD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAaA;;AAnH2B;;AAsH7B,MAAMiC,eAAe,GAAIhD,KAAD,IAAW;AAClC,SAAO;AACN0C,IAAAA,OAAO,EAAE1C,KAAK,CAACiD,IAAN,CAAWP,OADd;AAENE,IAAAA,KAAK,EAAE5C,KAAK,CAACiD,IAAN,CAAWL,KAFZ;AAGNG,IAAAA,eAAe,EAAE/C,KAAK,CAACiD,IAAN,CAAWC,KAAX,KAAqB,IAHhC;AAINpB,IAAAA,QAAQ,EAAE9B,KAAK,CAACmD,aAAN,CAAoBrB,QAJxB;AAKNC,IAAAA,gBAAgB,EAAE/B,KAAK,CAACiD,IAAN,CAAWlB;AALvB,GAAP;AAOA,CARD;;AAUA,MAAMqB,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACNzB,IAAAA,MAAM,EAAE,CAAC1B,KAAD,EAAQW,QAAR,EAAkBE,QAAlB,KACPsC,QAAQ,CAACzD,OAAO,CAACqD,IAAR,CAAa/C,KAAb,EAAoBW,QAApB,EAA8BE,QAA9B,CAAD,CAFH;AAGNiB,IAAAA,qBAAqB,EAAE,MAAMqB,QAAQ,CAACzD,OAAO,CAAC0D,kBAAR,CAA2B,GAA3B,CAAD;AAH/B,GAAP;AAKA,CAND;;AAQA,eAAehE,OAAO,CAAC0D,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CrD,IAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport classes from \"./Auth.module.css\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../shared/utillity\";\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n\t\t\temail: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"email\",\n\t\t\t\t\tplaceholder: \"Mail Address\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"password\",\n\t\t\t\t\tplaceholder: \"Password\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t},\n\t\tisSignup: true,\n\t};\n\n\tcomponentDidMount() {\n\t\tif (!this.props.building && this.props.authRedirectPath !== \"/\") {\n\t\t\tthis.props.onSetAuthRedirectPath();\n\t\t}\n\t}\n\n\tinputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = updateObject(this.state.controls, {\n\t\t\t[controlName]: updateObject(this.state.controls[controlName], {\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: this.checkValidaity(\n\t\t\t\t\tevent.target.value,\n\t\t\t\t\tthis.state.controls[controlName].validation\n\t\t\t\t),\n\t\t\t\ttouched: true,\n\t\t\t}),\n\t\t});\n\t\tthis.setState({ controls: updatedControls });\n\t};\n\n\tswitchAuthModeHandler = () => {\n\t\tthis.setState((prevState) => {\n\t\t\treturn { isSignup: !prevState.isSignup };\n\t\t});\n\t};\n\n\tsubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.onAuth(\n\t\t\tthis.state.controls.email.value,\n\t\t\tthis.state.controls.password.value,\n\t\t\tthis.state.isSignup\n\t\t);\n\t};\n\n\trender() {\n\t\tconst formElementsArray = [];\n\t\tfor (let key in this.state.controls) {\n\t\t\tformElementsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.controls[key],\n\t\t\t});\n\t\t}\n\t\tlet form = formElementsArray.map((formElement) => (\n\t\t\t<Input\n\t\t\t\tkey={formElement.id}\n\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\tvalue={formElement.config.value}\n\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}\n\t\t\t/>\n\t\t));\n\t\tif (this.props.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\n\t\tlet errorMessage = null;\n\t\tif (this.props.error) {\n\t\t\terrorMessage = <p>{this.props.error.message}</p>;\n\t\t}\n\t\tlet authRedirect = null;\n\t\tif (this.props.isAuthenticated) {\n\t\t\tauthRedirect = <Redirect to={this.props.authRedirectPath} />;\n\t\t}\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n\t\t\t\t{authRedirect}\n\t\t\t\t{errorMessage}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType='Success'>SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button clicked={this.switchAuthModeHandler} btnType='Danger'>\n\t\t\t\t\tSWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuthenticated: state.auth.token !== null,\n\t\tbuilding: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) =>\n\t\t\tdispatch(actions.auth(email, password, isSignup)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRediectPath(\"/\")),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}