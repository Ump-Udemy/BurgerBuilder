{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"../../axios-orders\";\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFailed = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAILED,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post(\"/orders.json?auth=\" + token, orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFailed(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrderFailed = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAILED,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = \"?auth=\" + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get(\"/orders.json?\" + queryParams).then(response => {\n      const fecthedOrders = [];\n\n      for (let key in response.data) {\n        fecthedOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fecthedOrders));\n    }).catch(error => {\n      dispatch(fetchOrderFailed(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFailed","error","PURCHASE_BURGER_FAILED","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrderFailed","FETCH_ORDERS_FAILED","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","userId","queryParams","get","fecthedOrders","key","push"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"../../axios-orders\";\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n\treturn {\n\t\ttype: actionTypes.PURCHASE_BURGER_SUCCESS,\n\t\torderId: id,\n\t\torderData: orderData,\n\t};\n};\n\nexport const purchaseBurgerFailed = (error) => {\n\treturn {\n\t\ttype: actionTypes.PURCHASE_BURGER_FAILED,\n\t\terror: error,\n\t};\n};\n\nexport const purchaseBurgerStart = () => {\n\treturn {\n\t\ttype: actionTypes.PURCHASE_BURGER_START,\n\t};\n};\n\nexport const purchaseBurger = (orderData, token) => {\n\treturn (dispatch) => {\n\t\tdispatch(purchaseBurgerStart());\n\t\taxios\n\t\t\t.post(\"/orders.json?auth=\" + token, orderData)\n\t\t\t.then((response) => {\n\t\t\t\tdispatch(purchaseBurgerSuccess(response.data.name, orderData));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tdispatch(purchaseBurgerFailed(error));\n\t\t\t});\n\t};\n};\n\nexport const purchaseInit = () => {\n\treturn {\n\t\ttype: actionTypes.PURCHASE_INIT,\n\t};\n};\n\nexport const fetchOrdersSuccess = (orders) => {\n\treturn { type: actionTypes.FETCH_ORDERS_SUCCESS, orders: orders };\n};\n\nexport const fetchOrderFailed = (error) => {\n\treturn {\n\t\ttype: actionTypes.FETCH_ORDERS_FAILED,\n\t\terror: error,\n\t};\n};\n\nexport const fetchOrdersStart = () => {\n\treturn {\n\t\ttype: actionTypes.FETCH_ORDERS_START,\n\t};\n};\nexport const fetchOrders = (token, userId) => {\n\treturn (dispatch) => {\n\t\tdispatch(fetchOrdersStart());\n\t\tconst queryParams =\n\t\t\t\"?auth=\" + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n\t\taxios\n\t\t\t.get(\"/orders.json?\" + queryParams)\n\t\t\t.then((response) => {\n\t\t\t\tconst fecthedOrders = [];\n\t\t\t\tfor (let key in response.data) {\n\t\t\t\t\tfecthedOrders.push({ ...response.data[key], id: key });\n\t\t\t\t}\n\t\t\t\tdispatch(fetchOrdersSuccess(fecthedOrders));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tdispatch(fetchOrderFailed(error));\n\t\t\t});\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}