{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem(\"token\");\n  yield localStorage.removeItem(\"expirationDate\");\n  yield localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: email,\n    password: password,\n    returnSecureToken: true\n  };\n  let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\n  if (!isSignup) {\n    url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n  }\n\n  axios.post(url, authData).then(response => {\n    const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem(\"token\", response.data.idToken);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", response.data.localId);\n    dispatch(authSuccess(response.data.idToken, response.data.localId));\n    dispatch(checkAuthTimeout(response.data.expiresIn));\n  }).catch(error => {\n    dispatch(authFailed(error.response.data.error));\n  });\n}","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/store/sagas/auth.js"],"names":["put","delay","actions","logoutSaga","action","localStorage","removeItem","logoutSuccess","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","password","returnSecureToken","url","isSignup","axios","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","dispatch","authSuccess","checkAuthTimeout","catch","error","authFailed"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AAEA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AACnC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMN,GAAG,CAACE,OAAO,CAACK,aAAR,EAAD,CAAT;AACA;AAED,OAAO,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAC7C,QAAMH,KAAK,CAACG,MAAM,CAACK,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMT,GAAG,CAACE,OAAO,CAACQ,MAAR,EAAD,CAAT;AACA;AAED,OAAO,UAAUC,YAAV,CAAuBP,MAAvB,EAA+B;AACrC,QAAMJ,GAAG,CAACE,OAAO,CAACU,SAAR,EAAD,CAAT;AACA,QAAMC,QAAQ,GAAG;AAChBC,IAAAA,KAAK,EAAEA,KADS;AAEhBC,IAAAA,QAAQ,EAAEA,QAFM;AAGhBC,IAAAA,iBAAiB,EAAE;AAHH,GAAjB;AAKA,MAAIC,GAAG,GACN,uGADD;;AAEA,MAAI,CAACC,QAAL,EAAe;AACdD,IAAAA,GAAG,GACF,mHADD;AAEA;;AACDE,EAAAA,KAAK,CACHC,IADF,CACOH,GADP,EACYJ,QADZ,EAEEQ,IAFF,CAEQC,QAAD,IAAc;AACnB,UAAMC,cAAc,GAAG,IAAIC,IAAJ,CACtB,IAAIA,IAAJ,GAAWC,OAAX,KAAuBH,QAAQ,CAACI,IAAT,CAAcC,SAAd,GAA0B,IAD3B,CAAvB;AAGAtB,IAAAA,YAAY,CAACuB,OAAb,CAAqB,OAArB,EAA8BN,QAAQ,CAACI,IAAT,CAAcG,OAA5C;AACAxB,IAAAA,YAAY,CAACuB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAlB,IAAAA,YAAY,CAACuB,OAAb,CAAqB,QAArB,EAA+BN,QAAQ,CAACI,IAAT,CAAcI,OAA7C;AACAC,IAAAA,QAAQ,CAACC,WAAW,CAACV,QAAQ,CAACI,IAAT,CAAcG,OAAf,EAAwBP,QAAQ,CAACI,IAAT,CAAcI,OAAtC,CAAZ,CAAR;AACAC,IAAAA,QAAQ,CAACE,gBAAgB,CAACX,QAAQ,CAACI,IAAT,CAAcC,SAAf,CAAjB,CAAR;AACA,GAXF,EAYEO,KAZF,CAYSC,KAAD,IAAW;AACjBJ,IAAAA,QAAQ,CAACK,UAAU,CAACD,KAAK,CAACb,QAAN,CAAeI,IAAf,CAAoBS,KAArB,CAAX,CAAR;AACA,GAdF;AAeA","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\n\nimport * as actions from \"../actions/index\";\n\nexport function* logoutSaga(action) {\n\tyield localStorage.removeItem(\"token\");\n\tyield localStorage.removeItem(\"expirationDate\");\n\tyield localStorage.removeItem(\"userId\");\n\tyield put(actions.logoutSuccess());\n}\n\nexport function* checkAuthTimeoutSaga(action) {\n\tyield delay(action.expirationTime * 1000);\n\tyield put(actions.logout());\n}\n\nexport function* authUserSaga(action) {\n\tyield put(actions.authStart());\n\tconst authData = {\n\t\temail: email,\n\t\tpassword: password,\n\t\treturnSecureToken: true,\n\t};\n\tlet url =\n\t\t\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\tif (!isSignup) {\n\t\turl =\n\t\t\t\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\t}\n\taxios\n\t\t.post(url, authData)\n\t\t.then((response) => {\n\t\t\tconst expirationDate = new Date(\n\t\t\t\tnew Date().getTime() + response.data.expiresIn * 1000\n\t\t\t);\n\t\t\tlocalStorage.setItem(\"token\", response.data.idToken);\n\t\t\tlocalStorage.setItem(\"expirationDate\", expirationDate);\n\t\t\tlocalStorage.setItem(\"userId\", response.data.localId);\n\t\t\tdispatch(authSuccess(response.data.idToken, response.data.localId));\n\t\t\tdispatch(checkAuthTimeout(response.data.expiresIn));\n\t\t})\n\t\t.catch((error) => {\n\t\t\tdispatch(authFailed(error.response.data.error));\n\t\t});\n}\n"]},"metadata":{},"sourceType":"module"}