{"ast":null,"code":"import axios from \"axios\";\nimport { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem(\"token\");\n  yield localStorage.removeItem(\"expirationDate\");\n  yield localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logout());\n}\nexport function* authUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n    returnSecureToken: true\n  };\n  let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\n  if (!action.isSignup) {\n    url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n  }\n\n  try {\n    const response = yield axios.post(url, authData);\n    const expirationDate = yield new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    yield localStorage.setItem(\"token\", response.data.idToken);\n    yield localStorage.setItem(\"expirationDate\", expirationDate);\n    yield localStorage.setItem(\"userId\", response.data.localId);\n    yield put(actions.authSuccess(response.data.idToken, response.data.localId));\n    yield put(actions.checkAuthTimeout(response.data.expiresIn));\n  } catch (error) {\n    dispatch(actions.authFailed(error.response.data.error));\n  }\n}","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/store/sagas/auth.js"],"names":["axios","put","delay","actions","logoutSaga","action","localStorage","removeItem","logoutSuccess","checkAuthTimeoutSaga","expirationTime","logout","authUserSaga","authStart","authData","email","password","returnSecureToken","url","isSignup","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authSuccess","checkAuthTimeout","error","dispatch","authFailed"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AAEA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AACnC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMN,GAAG,CAACE,OAAO,CAACK,aAAR,EAAD,CAAT;AACA;AAED,OAAO,UAAUC,oBAAV,CAA+BJ,MAA/B,EAAuC;AAC7C,QAAMH,KAAK,CAACG,MAAM,CAACK,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMT,GAAG,CAACE,OAAO,CAACQ,MAAR,EAAD,CAAT;AACA;AAED,OAAO,UAAUC,YAAV,CAAuBP,MAAvB,EAA+B;AACrC,QAAMJ,GAAG,CAACE,OAAO,CAACU,SAAR,EAAD,CAAT;AACA,QAAMC,QAAQ,GAAG;AAChBC,IAAAA,KAAK,EAAEV,MAAM,CAACU,KADE;AAEhBC,IAAAA,QAAQ,EAAEX,MAAM,CAACW,QAFD;AAGhBC,IAAAA,iBAAiB,EAAE;AAHH,GAAjB;AAKA,MAAIC,GAAG,GACN,uGADD;;AAEA,MAAI,CAACb,MAAM,CAACc,QAAZ,EAAsB;AACrBD,IAAAA,GAAG,GACF,mHADD;AAEA;;AACD,MAAI;AACH,UAAME,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAWH,GAAX,EAAgBJ,QAAhB,CAAvB;AAEA,UAAMQ,cAAc,GAAG,MAAM,IAAIC,IAAJ,CAC5B,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACK,IAAT,CAAcC,SAAd,GAA0B,IADrB,CAA7B;AAGA,UAAMpB,YAAY,CAACqB,OAAb,CAAqB,OAArB,EAA8BP,QAAQ,CAACK,IAAT,CAAcG,OAA5C,CAAN;AACA,UAAMtB,YAAY,CAACqB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC,CAAN;AACA,UAAMhB,YAAY,CAACqB,OAAb,CAAqB,QAArB,EAA+BP,QAAQ,CAACK,IAAT,CAAcI,OAA7C,CAAN;AACA,UAAM5B,GAAG,CACRE,OAAO,CAAC2B,WAAR,CAAoBV,QAAQ,CAACK,IAAT,CAAcG,OAAlC,EAA2CR,QAAQ,CAACK,IAAT,CAAcI,OAAzD,CADQ,CAAT;AAGA,UAAM5B,GAAG,CAACE,OAAO,CAAC4B,gBAAR,CAAyBX,QAAQ,CAACK,IAAT,CAAcC,SAAvC,CAAD,CAAT;AACA,GAbD,CAaE,OAAOM,KAAP,EAAc;AACfC,IAAAA,QAAQ,CAAC9B,OAAO,CAAC+B,UAAR,CAAmBF,KAAK,CAACZ,QAAN,CAAeK,IAAf,CAAoBO,KAAvC,CAAD,CAAR;AACA;AACD","sourcesContent":["import axios from \"axios\";\nimport { put, delay } from \"redux-saga/effects\";\n\nimport * as actions from \"../actions/index\";\n\nexport function* logoutSaga(action) {\n\tyield localStorage.removeItem(\"token\");\n\tyield localStorage.removeItem(\"expirationDate\");\n\tyield localStorage.removeItem(\"userId\");\n\tyield put(actions.logoutSuccess());\n}\n\nexport function* checkAuthTimeoutSaga(action) {\n\tyield delay(action.expirationTime * 1000);\n\tyield put(actions.logout());\n}\n\nexport function* authUserSaga(action) {\n\tyield put(actions.authStart());\n\tconst authData = {\n\t\temail: action.email,\n\t\tpassword: action.password,\n\t\treturnSecureToken: true,\n\t};\n\tlet url =\n\t\t\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\tif (!action.isSignup) {\n\t\turl =\n\t\t\t\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyC7Z7IBWL-_SLT1bjJ3w9GY5XAC7-1ogb8\";\n\t}\n\ttry {\n\t\tconst response = yield axios.post(url, authData);\n\n\t\tconst expirationDate = yield new Date(\n\t\t\tnew Date().getTime() + response.data.expiresIn * 1000\n\t\t);\n\t\tyield localStorage.setItem(\"token\", response.data.idToken);\n\t\tyield localStorage.setItem(\"expirationDate\", expirationDate);\n\t\tyield localStorage.setItem(\"userId\", response.data.localId);\n\t\tyield put(\n\t\t\tactions.authSuccess(response.data.idToken, response.data.localId)\n\t\t);\n\t\tyield put(actions.checkAuthTimeout(response.data.expiresIn));\n\t} catch (error) {\n\t\tdispatch(actions.authFailed(error.response.data.error));\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}