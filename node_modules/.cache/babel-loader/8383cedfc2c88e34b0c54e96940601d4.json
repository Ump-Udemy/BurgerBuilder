{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from \"react\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Your Name\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Street\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"ZIP Code\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"text\",\n            placeholder: \"Country\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Your E-Mail\"\n          },\n          value: \"\",\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: \"select\",\n          elementConfig: {\n            options: [{\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            }, {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }]\n          },\n          value: \"\",\n          validation: {},\n          valid: \"true\"\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post(\"/orders.json\", order).then(response => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n        this.props.history.push(\"/\");\n      }).catch(error => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidaity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidaity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \" \" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.orderHandler,\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 6\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        children: \"ORDER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ContactData,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Enter your Contact Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","Spinner","Input","classes","axios","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","orderData","post","then","response","purchasing","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidaity","rules","isValid","trim","length","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\n\nclass ContactData extends Component {\n\tstate = {\n\t\torderForm: {\n\t\t\tname: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"text\",\n\t\t\t\t\tplaceholder: \"Your Name\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tstreet: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"text\",\n\t\t\t\t\tplaceholder: \"Street\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tzipCode: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"text\",\n\t\t\t\t\tplaceholder: \"ZIP Code\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 5,\n\t\t\t\t\tmaxLength: 5,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tcountry: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"text\",\n\t\t\t\t\tplaceholder: \"Country\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\temail: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"email\",\n\t\t\t\t\tplaceholder: \"Your E-Mail\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tdeliveryMethod: {\n\t\t\t\telementType: \"select\",\n\t\t\t\telementConfig: {\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{ value: \"fastest\", displayValue: \"Fastest\" },\n\t\t\t\t\t\t{ value: \"cheapest\", displayValue: \"Cheapest\" },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {},\n\t\t\t\tvalid: \"true\",\n\t\t\t},\n\t\t},\n\t\tformIsValid: false,\n\t\tloading: false,\n\t};\n\torderHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.setState({ loading: true });\n\t\tconst formData = {};\n\t\tfor (let formElementIdentifier in this.state.orderForm) {\n\t\t\tformData[formElementIdentifier] = this.state.orderForm[\n\t\t\t\tformElementIdentifier\n\t\t\t].value;\n\t\t}\n\t\tconst order = {\n\t\t\tingredients: this.props.ingredients,\n\t\t\tprice: this.props.price,\n\t\t\torderData: formData,\n\t\t};\n\t\taxios\n\t\t\t.post(\"/orders.json\", order)\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({ loading: false, purchasing: false });\n\t\t\t\tthis.props.history.push(\"/\");\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.setState({ loading: false, purchasing: false });\n\t\t\t});\n\t};\n\n\tcheckValidaity(value, rules) {\n\t\tlet isValid = true;\n\t\tif (rules.required) {\n\t\t\tisValid = value.trim() !== \" \" && isValid;\n\t\t}\n\n\t\tif (rules.minLength) {\n\t\t\tisValid = value.length >= rules.minLength && isValid;\n\t\t}\n\n\t\tif (rules.maxLength) {\n\t\t\tisValid = value.length <= rules.maxLength && isValid;\n\t\t}\n\n\t\treturn isValid;\n\t}\n\n\tinputChangedHandler = (event, inputIdentifier) => {\n\t\tconst updatedOrderForm = { ...this.state.orderForm };\n\t\tconst updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\n\t\tupdatedFormElement.value = event.target.value;\n\t\tupdatedFormElement.valid = this.checkValidaity(\n\t\t\tupdatedFormElement.value,\n\t\t\tupdatedFormElement.validation\n\t\t);\n\t\tupdatedFormElement.touched = true;\n\t\tupdatedOrderForm[inputIdentifier] = updatedFormElement;\n\t\tlet formIsValid = true;\n\t\tfor (let inputIdentifier in updatedOrderForm) {\n\t\t\tformIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n\t\t}\n\t\tthis.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n\t};\n\n\trender() {\n\t\tconst formElementsArray = [];\n\t\tfor (let key in this.state.orderForm) {\n\t\t\tformElementsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.orderForm[key],\n\t\t\t});\n\t\t}\n\t\tlet form = (\n\t\t\t<form onSubmit={this.orderHandler}>\n\t\t\t\t{formElementsArray.map((formElement) => (\n\t\t\t\t\t<Input\n\t\t\t\t\t\tkey={formElement.id}\n\t\t\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\t\t\tvalue={formElement.config.value}\n\t\t\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<Button btnType='Success' disabled={!this.state.formIsValid}>\n\t\t\t\t\tORDER\n\t\t\t\t</Button>\n\t\t\t</form>\n\t\t);\n\t\tif (this.state.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\t\treturn (\n\t\t\t<div className={classes.ContactData}>\n\t\t\t\t<h4>Enter your Contact Data</h4>\n\t\t\t\t{form}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ContactData;\n"]},"metadata":{},"sourceType":"module"}