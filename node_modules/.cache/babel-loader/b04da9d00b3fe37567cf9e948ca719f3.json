{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Auth/Auth.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport classes from \"./Auth.module.css\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidaity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n  }\n\n  componentDidMount() {}\n\n  checkValidaity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== \" \" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this);\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        children: [\"SWITCH TO \", this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/ump/Desktop/Udemy/React The Complete Guide(incl Hooks,React Rounter,Redux)/burgerbuilder/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","classes","Input","Spinner","Button","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidaity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","componentDidMount","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","building","burgerBuilder","authRedirectPath","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport classes from \"./Auth.module.css\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport Button from \"../../components/UI/Button/Button\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n\tstate = {\n\t\tcontrols: {\n\t\t\temail: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"email\",\n\t\t\t\t\tplaceholder: \"Mail Address\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tisEmail: true,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\telementType: \"input\",\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: \"password\",\n\t\t\t\t\tplaceholder: \"Password\",\n\t\t\t\t},\n\t\t\t\tvalue: \"\",\n\t\t\t\tvalidation: {\n\t\t\t\t\trequired: true,\n\t\t\t\t\tminLength: 6,\n\t\t\t\t},\n\t\t\t\tvalid: false,\n\t\t\t\ttouched: false,\n\t\t\t},\n\t\t},\n\t\tisSignup: true,\n\t};\n\n\tcomponentDidMount() {}\n\n\tcheckValidaity(value, rules) {\n\t\tlet isValid = true;\n\t\tif (rules.required) {\n\t\t\tisValid = value.trim() !== \" \" && isValid;\n\t\t}\n\n\t\tif (rules.minLength) {\n\t\t\tisValid = value.length >= rules.minLength && isValid;\n\t\t}\n\n\t\tif (rules.maxLength) {\n\t\t\tisValid = value.length <= rules.maxLength && isValid;\n\t\t}\n\t\tif (rules.isEmail) {\n\t\t\tconst pattern = /[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\t\t\tisValid = pattern.test(value) && isValid;\n\t\t}\n\n\t\tif (rules.isNumeric) {\n\t\t\tconst pattern = /^\\d+$/;\n\t\t\tisValid = pattern.test(value) && isValid;\n\t\t}\n\n\t\treturn isValid;\n\t}\n\n\tinputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = {\n\t\t\t...this.state.controls,\n\t\t\t[controlName]: {\n\t\t\t\t...this.state.controls[controlName],\n\t\t\t\tvalue: event.target.value,\n\t\t\t\tvalid: this.checkValidaity(\n\t\t\t\t\tevent.target.value,\n\t\t\t\t\tthis.state.controls[controlName].validation\n\t\t\t\t),\n\t\t\t\ttouched: true,\n\t\t\t},\n\t\t};\n\t\tthis.setState({ controls: updatedControls });\n\t};\n\n\tswitchAuthModeHandler = () => {\n\t\tthis.setState((prevState) => {\n\t\t\treturn { isSignup: !prevState.isSignup };\n\t\t});\n\t};\n\n\tsubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.onAuth(\n\t\t\tthis.state.controls.email.value,\n\t\t\tthis.state.controls.password.value,\n\t\t\tthis.state.isSignup\n\t\t);\n\t};\n\n\trender() {\n\t\tconst formElementsArray = [];\n\t\tfor (let key in this.state.controls) {\n\t\t\tformElementsArray.push({\n\t\t\t\tid: key,\n\t\t\t\tconfig: this.state.controls[key],\n\t\t\t});\n\t\t}\n\t\tlet form = formElementsArray.map((formElement) => (\n\t\t\t<Input\n\t\t\t\tkey={formElement.id}\n\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\tvalue={formElement.config.value}\n\t\t\t\tinvalid={!formElement.config.valid}\n\t\t\t\tshouldValidate={formElement.config.validation}\n\t\t\t\ttouched={formElement.config.touched}\n\t\t\t\tchanged={(event) => this.inputChangedHandler(event, formElement.id)}\n\t\t\t/>\n\t\t));\n\t\tif (this.props.loading) {\n\t\t\tform = <Spinner />;\n\t\t}\n\n\t\tlet errorMessage = null;\n\t\tif (this.props.error) {\n\t\t\terrorMessage = <p>{this.props.error.message}</p>;\n\t\t}\n\t\tlet authRedirect = null;\n\t\tif (this.props.isAuthenticated) {\n\t\t\tauthRedirect = <Redirect to='/' />;\n\t\t}\n\t\treturn (\n\t\t\t<div className={classes.Auth}>\n\t\t\t\t{authRedirect}\n\t\t\t\t{errorMessage}\n\t\t\t\t<form onSubmit={this.submitHandler}>\n\t\t\t\t\t{form}\n\t\t\t\t\t<Button btnType='Success'>SUBMIT</Button>\n\t\t\t\t</form>\n\t\t\t\t<Button clicked={this.switchAuthModeHandler} btnType='Danger'>\n\t\t\t\t\tSWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuthenticated: state.auth.token !== null,\n\t\tbuilding: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonAuth: (email, password, isSignup) =>\n\t\t\tdispatch(actions.auth(email, password, isSignup)),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}